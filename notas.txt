Tutorial em: https://www.youtube.com/watch?v=tWHXaSC2T_s


###############
### BACKEND ### (vídeo até 1h03m)
###############


VENV:
. ele criou o VENV dentro da pasta 'backend': python -m venv venv
. ativar: .\venv\Scripts\activate
. quando rodando em um Venv, temos que set up our variables:
	. set FLASK_APP=app.py (Flask app evironment variable)
	. set FLASK_ENV=development


BIBLIOTECAS:
. pip install flask flask-sqlalchemy flask-cors


RODAR O APP:
. flask run --reload


GIT:
. para inicializar o repositório: git init
. criar o arquivo '.gitignore' (o conteúdo copiei do repositório de autor do tut.)
. o '.gitignore' é dentro da pasta 'backend'
. aba do "Source Control" (menu esquerdo), podemos ver os arquivos que possuem mudanças
. para adicionar todas os arquivos com mudanças na "staging area", clicamos no "+" que
aparece quando passamos o mouse sobre o "Changes"
. inserir a mensagem do commit na caixa de texto, p.ex. "1st backend completed", e "Commit"



################
### FRONTEND ### (vídeo a partir de 1h03m)
################


. "cd .\frontend\"
. "npm create vite@latest ."
. npm – This is the Node Package Manager, used to install and manage JavaScript packages
. selecionamos "React" e "JavaScript"
. "npm install"
. "npm run dev"
. ver a porta em que o frontend app vai rodar. No caso foi "http://localhost:5173/"
. se quiser mudar a porta, vai no 'vite.config.js' e inserir abaixo de "plugins":
	. "server: {port: 3000,},"

. agora podemos editar o design, começando por deletar o boilerplate dentro da pasta 'src':
	. deletar a pasta 'assets' e seu conteúdo
	. index.css
	. App.css
	. dentro de App.jsx, deixar apenas:
		"function App() {
		  return (
			<>
			  <h1>Hello</h1>
			</>
		  )
		}
		export default App"
	. em main.jsx deletar a linha "import './index.css'"
	
. vamos usar o chakra-ui.com. São componentes React para agilizar o design
. ir em Docs > Get Started > Vite
. seguir o passo a passo. certificar de estar dentro da pasta frontend no terminal
	. atenção com as opções pois não estamos usando TypeScript, e sim JavaScript
. atenção para o passo que está em 1h07m44s no vídeo
. atenção: o Vite não usa "@/components...", e sim"./components..."
. tive problemas no PATH e tive que alterar o 'vite.config.js', ver obs no corpo do arquivo


###########################
### CRIANDO UM TEMPLATE ### (essa parte é minha, não é do vídeo)
###########################


Neste ponto, temos um app básico funcionando (Flask no backend e Vite/Chakra no frontend).
Vamos tentar criar um template a partir do nosso projeto. Vamos então:
. criar o arquivo requirements: com o venv ativo comando "pip freeze > requirements.txt"
. copiei a pasta inteira do projeto e renomeei para "react-python-template"
. deletei a pasta "backend/venv"
. deletei a base de dados "instance/friends.db"

A partir daqui vamos tentar criar um novo projeto a partir deste template:venc
. copiei essa pasta do template inteira para criar um novo projeto
. abri ela no windsurf, abri um novo terminal e fui até a pasta backend
. lá, criei um novo venv: "python -m venv venv"
. ativei o venv
. instalei os requirements: "pip install -r requirements.txt"
. rodar o frontend com "npm run dev"
. parece que funcionou!
. vou deletar agora esse teste e manter o template "react-python-template"


##############################
### CONTINUANDO O TUTORIAL ###
##############################


. no componente Navbar.jsx, temos os icones IoMoon e LuSun. eles são de um "icon library"
. entrão precisamos instalá-la (a library). No dir frontend: "npm i react-icons"
. para ver todos os icones disponíveis nesta biblioteca, ir no site "react-icons"



#########################################
### Alguns prompts para usar nos LLMs ###
#########################################

I am developing a webapp using React/Vite and chakra UI v3. 
Please check if the file attached "CreateUserModal.txt" can be improved. 
This file is a ".jsx" file im my system.
I have also attached Chakra UI v3 documentation, have it in mind when suggesting the improvements.
Show me only the changes.



#################
### Deploying ###
#################

. ver video em 2h05m31s

